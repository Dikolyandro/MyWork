Документация к паттернам проектирования в приложении квиза

1. Singleton (Одиночка)

Класс: QuizManager

Назначение: Паттерн Singleton нужен для того, чтобы в приложении был только один объект QuizManager, 
который управляет состоянием квиза. QuizManager хранит все вопросы, текущий вопрос и считает количество правильных ответов.

Как это работает: Если мы попытаемся создать новый объект QuizManager, вместо создания нового экземпляра 
вернётся уже существующий. Это помогает централизовать управление квизом, чтобы его состояние не дублировалось, что упрощает логику работы и предотвращает ошибки.

2. Factory Method (Фабричный метод)

Класс: QuizFactory

Назначение: Паттерн Factory Method используется для создания разных типов квизов (например, футбольного или общих знаний) 
в зависимости от нужного типа. Это позволяет легко добавлять новые типы квизов, не изменяя основной код.

Как это работает: Класс QuizFactory содержит метод createQuiz, который принимает тип квиза (в данном случае, это 'football') 
и возвращает экземпляр QuizManager с вопросами, соответствующими этому типу. Если в будущем нам понадобится создать другие квизы, мы просто добавим их в фабрику.

3. Observer (Наблюдатель)

Класс: ScoreObserver

Назначение: Паттерн Observer позволяет компонентам приложения следить за изменениями в другом объекте. В данном случае 
ScoreObserver отслеживает счёт в квизе, обновляя интерфейс при каждом изменении счёта. 

Как это работает: Когда счёт в квизе меняется, QuizManager уведомляет всех своих наблюдателей, вызывая их метод update. 
 — это наблюдатель, который получает обновления и обновляет отображение счёта на странице. Так можно добавлять и удалять наблюдателей без изменения логики квиза.

4. Facade (Фасад)

Класс: QuizFacade

Назначение: Паттерн Facade создаёт удобную точку для управления квизом, упрощая взаимодействие с системой. Благодаря 
этому паттерну мы можем начинать квиз, отвечать на вопросы и получать текущий счёт, не обращаясь напрямую к QuizManager или другим компонентам.

Как это работает: QuizFacade предоставляет методы, такие как startQuiz, answerQuestion, getScore, getCurrentQuestion 
и isQuizOver. Вместо того чтобы напрямую взаимодействовать с QuizManager, мы используем эти методы фасада, упрощая код и делая его более понятным.

Резюме

Singleton (Одиночка) гарантирует, что существует только один объект QuizManager, управляющий состоянием квиза.

Factory Method (Фабричный метод) создаёт экземпляры квиза, что позволяет легко добавлять новые типы квизов в будущем.

Observer (Наблюдатель) позволяет обновлять элементы интерфейса, когда меняется счёт, без прямого вмешательства в логику QuizManager.

Facade (Фасад) предоставляет простой интерфейс для управления квизом, скрывая более сложные детали реализации.

Эти паттерны делают приложение гибким, более организованным и простым в поддержке, что позволяет легко добавлять 
новые функции и сохранять логику кода понятной.